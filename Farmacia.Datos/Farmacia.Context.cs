//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Farmacia.Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FarmaciaEntities : DbContext
    {
        public FarmaciaEntities()
            : base("name=FarmaciaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bodega> Bodega { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<DetalleFactura> DetalleFactura { get; set; }
        public virtual DbSet<DetalleKardex> DetalleKardex { get; set; }
        public virtual DbSet<Documento> Documento { get; set; }
        public virtual DbSet<EstanteFarmacia> EstanteFarmacia { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Kardex> Kardex { get; set; }
        public virtual DbSet<Metodo> Metodo { get; set; }
        public virtual DbSet<MovimientoKardex> MovimientoKardex { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<ProductosAlternativos> ProductosAlternativos { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TipoMovimientoKardex> TipoMovimientoKardex { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual ObjectResult<string> SP_ClienteRegistrar(string dNI, string primerNombre, string primerApellido)
        {
            var dNIParameter = dNI != null ?
                new ObjectParameter("DNI", dNI) :
                new ObjectParameter("DNI", typeof(string));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("PrimerNombre", primerNombre) :
                new ObjectParameter("PrimerNombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ClienteRegistrar", dNIParameter, primerNombreParameter, primerApellidoParameter);
        }
    
        public virtual ObjectResult<SP_FacturaListarItems_Result> SP_FacturaListarItems(string noFactura)
        {
            var noFacturaParameter = noFactura != null ?
                new ObjectParameter("NoFactura", noFactura) :
                new ObjectParameter("NoFactura", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FacturaListarItems_Result>("SP_FacturaListarItems", noFacturaParameter);
        }
    
        public virtual ObjectResult<SP_FacturaMostrar_Result> SP_FacturaMostrar(string noFactura)
        {
            var noFacturaParameter = noFactura != null ?
                new ObjectParameter("NoFactura", noFactura) :
                new ObjectParameter("NoFactura", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FacturaMostrar_Result>("SP_FacturaMostrar", noFacturaParameter);
        }
    
        public virtual ObjectResult<string> SP_FacturaRegistrar(string noFactura, Nullable<int> iDUsuarioRegistro, string dNICliente, Nullable<int> iDProducto, Nullable<int> cantidad, Nullable<decimal> totalItem)
        {
            var noFacturaParameter = noFactura != null ?
                new ObjectParameter("NoFactura", noFactura) :
                new ObjectParameter("NoFactura", typeof(string));
    
            var iDUsuarioRegistroParameter = iDUsuarioRegistro.HasValue ?
                new ObjectParameter("IDUsuarioRegistro", iDUsuarioRegistro) :
                new ObjectParameter("IDUsuarioRegistro", typeof(int));
    
            var dNIClienteParameter = dNICliente != null ?
                new ObjectParameter("DNICliente", dNICliente) :
                new ObjectParameter("DNICliente", typeof(string));
    
            var iDProductoParameter = iDProducto.HasValue ?
                new ObjectParameter("IDProducto", iDProducto) :
                new ObjectParameter("IDProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var totalItemParameter = totalItem.HasValue ?
                new ObjectParameter("TotalItem", totalItem) :
                new ObjectParameter("TotalItem", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_FacturaRegistrar", noFacturaParameter, iDUsuarioRegistroParameter, dNIClienteParameter, iDProductoParameter, cantidadParameter, totalItemParameter);
        }
    
        public virtual ObjectResult<SP_MostrarFacturasDelDia_Result> SP_MostrarFacturasDelDia()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MostrarFacturasDelDia_Result>("SP_MostrarFacturasDelDia");
        }
    
        public virtual ObjectResult<SP_MostrarKardex_Result> SP_MostrarKardex(Nullable<int> iDProducto)
        {
            var iDProductoParameter = iDProducto.HasValue ?
                new ObjectParameter("IDProducto", iDProducto) :
                new ObjectParameter("IDProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MostrarKardex_Result>("SP_MostrarKardex", iDProductoParameter);
        }
    
        public virtual ObjectResult<SP_ProductoListar_Result> SP_ProductoListar(Nullable<int> iDProducto)
        {
            var iDProductoParameter = iDProducto.HasValue ?
                new ObjectParameter("IDProducto", iDProducto) :
                new ObjectParameter("IDProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductoListar_Result>("SP_ProductoListar", iDProductoParameter);
        }
    
        public virtual ObjectResult<string> SP_ProductoRegistrar(Nullable<int> iDProducto, string nombre, string descripcion, Nullable<int> cantidadEnEstante, Nullable<decimal> precio)
        {
            var iDProductoParameter = iDProducto.HasValue ?
                new ObjectParameter("IDProducto", iDProducto) :
                new ObjectParameter("IDProducto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var cantidadEnEstanteParameter = cantidadEnEstante.HasValue ?
                new ObjectParameter("CantidadEnEstante", cantidadEnEstante) :
                new ObjectParameter("CantidadEnEstante", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ProductoRegistrar", iDProductoParameter, nombreParameter, descripcionParameter, cantidadEnEstanteParameter, precioParameter);
        }
    
        public virtual ObjectResult<string> SP_RegistrarDetalleKardex(Nullable<int> iDProducto, Nullable<System.DateTime> fecha, string concepto, string noDocume, Nullable<System.DateTime> vencimiento, Nullable<int> iDTipoMov, Nullable<int> cantidad, Nullable<decimal> precioU, Nullable<decimal> precioTotal)
        {
            var iDProductoParameter = iDProducto.HasValue ?
                new ObjectParameter("IDProducto", iDProducto) :
                new ObjectParameter("IDProducto", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var noDocumeParameter = noDocume != null ?
                new ObjectParameter("NoDocume", noDocume) :
                new ObjectParameter("NoDocume", typeof(string));
    
            var vencimientoParameter = vencimiento.HasValue ?
                new ObjectParameter("Vencimiento", vencimiento) :
                new ObjectParameter("Vencimiento", typeof(System.DateTime));
    
            var iDTipoMovParameter = iDTipoMov.HasValue ?
                new ObjectParameter("IDTipoMov", iDTipoMov) :
                new ObjectParameter("IDTipoMov", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioUParameter = precioU.HasValue ?
                new ObjectParameter("PrecioU", precioU) :
                new ObjectParameter("PrecioU", typeof(decimal));
    
            var precioTotalParameter = precioTotal.HasValue ?
                new ObjectParameter("PrecioTotal", precioTotal) :
                new ObjectParameter("PrecioTotal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_RegistrarDetalleKardex", iDProductoParameter, fechaParameter, conceptoParameter, noDocumeParameter, vencimientoParameter, iDTipoMovParameter, cantidadParameter, precioUParameter, precioTotalParameter);
        }
    }
}
